{"version":3,"sources":["utils/request/config.ts","utils/request/index.ts","views/login/Login.tsx","utils/api/login.ts"],"names":["config","baseURL","testBaseURL","IP","testIP","fetch","axios","create","timeout","interceptors","request","use","method","data","headers","qs","stringify","error","Promise","reject","response","a","async","status","console","log","ToLogin","props","synchronizationAccount","e","setState","account","target","value","synchronizationPsw","password","login","param","_this","state","url","then","res","code","localStorage","setItem","JSON","history","push","this","getItem","Form","Field","className","placeholder","onChange","Button","inverted","color","type","onClick","React","Component","Login","withRouter"],"mappings":"yGAAA,kCAAO,IAAMA,EAAS,CACpBC,QAAS,8BACTC,YAAa,wBACbC,GAAI,uBACJC,OAAQ,mB,oGCDNC,EAAQC,IAAMC,OAAO,CACvBN,QAASD,IAAOC,QAChBO,QAAS,MAGXH,EAAMI,aAAaC,QAAQC,KAAI,SAAAX,GAM7B,MALsB,SAAlBA,EAAOY,QAAuC,QAAlBZ,EAAOY,QAAsC,WAAlBZ,EAAOY,QACpC,kBAAjBZ,EAAOa,MAAyD,wBAAnCb,EAAOc,QAAQ,kBACrDd,EAAOa,KAAOE,IAAGC,UAAUhB,EAAOa,OAG/Bb,KACN,SAAAiB,GACDC,QAAQC,OAAOF,MAGjBZ,EAAMI,aAAaW,SAAST,KAAI,SAAME,GAAN,SAAAQ,EAAAC,OAAA,yEACvBT,EAAKA,MADkB,wCAE7B,SAAAI,GACD,OAAIA,EAAMG,UACsB,MAA1BH,EAAMG,SAASG,QACjBC,QAAQC,IAAI,wFAEPP,QAAQC,OAAOF,EAAMG,SAASP,OAE9BK,QAAQC,OAAOF,MAIXZ,O,2JCrBTqB,E,YACJ,WAAYC,GAAa,IAAD,8BACtB,4CAAMA,KAmBRC,uBAAyB,SAACC,GACxB,EAAKC,SAAS,CAAEC,QAASF,EAAEG,OAAOC,SArBZ,EAwBxBC,mBAAqB,SAACL,GACpB,EAAKC,SAAS,CAAEK,SAAUN,EAAEG,OAAOC,SAzBb,EA4BxBG,MAAQ,WACN,ICvCsBC,EDuChBC,EAAK,eACN,EAAKC,MAAgBR,SAAY,EAAKQ,MAAgBJ,WCxCrCE,EDyCV,eAAKC,EAAMC,OCxClBlC,YAAM,CACXmC,IAAK,aACL5B,OAAQ,OACRC,KAAMwB,KDqC0BI,MAAK,SAAAC,GACP,MAArBA,EAAYC,OACfC,aAAaC,QAAQ,eAAgBC,KAAK9B,UAAU,CAACe,QAASW,EAAI7B,KAAKkB,WACtE,EAAKJ,MAAcoB,QAAQC,KAAK,eAhCvC,EAAKT,MAAQ,CACXR,QAAS,GACTI,SAAU,IAJU,E,yFAQK,IACnBY,EAAiBE,KAAKtB,MAAtBoB,QACaH,aAAaM,QAAQ,iBAExCH,EAAQC,KAAK,gB,+BA6Bf,OACE,kBAACG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,2BAAOC,UAAU,eAAjB,gBACA,2BAAOC,YAAY,eAAKrB,MAAQgB,KAAKV,MAAgBR,QAASwB,SAAUN,KAAKrB,0BAE/E,kBAACuB,EAAA,EAAKC,MAAN,KACE,2BAAOC,UAAU,eAAjB,gBACA,2BAAOC,YAAY,eAAKrB,MAAQgB,KAAKV,MAAgBJ,SAAUoB,SAAUN,KAAKf,sBAEhF,kBAACsB,EAAA,EAAD,CAAQC,UAAQ,EAACC,MAAM,SAASC,KAAK,SAASC,QAASX,KAAKb,OAA5D,qB,GApDcyB,IAAMC,WA0DtBC,EAAQC,YAAWtC,GACVqC","file":"static/js/12.bf3ec929.chunk.js","sourcesContent":["export const config = {\r\n  baseURL: 'http://111.229.226.139:9277',\r\n  testBaseURL: 'http://localhost:9277',\r\n  IP: '111.229.226.139:9277',\r\n  testIP: 'localhost:9277'\r\n}","import axios from 'axios'\r\nimport qs from 'qs'\r\nimport { config } from './config'\r\nlet fetch = axios.create({\r\n  baseURL: config.baseURL,\r\n  timeout: 30000\r\n})\r\n\r\nfetch.interceptors.request.use(config => {\r\n  if (config.method === 'post' || config.method === 'put' || config.method === 'delete') {\r\n    if (typeof(config.data) !== 'string' && config.headers['Content-Type'] !== 'multipart/form-data') {\r\n      config.data = qs.stringify(config.data)\r\n    }\r\n  }\r\n  return config\r\n}, error => {\r\n  Promise.reject(error)\r\n})\r\n\r\nfetch.interceptors.response.use(async data => {\r\n  return data.data\r\n}, error => {\r\n  if (error.response) {\r\n    if (error.response.status === 500) {\r\n      console.log('服务器错误，请联系管理员处理')\r\n    }\r\n    return Promise.reject(error.response.data)\r\n  } else {\r\n    return Promise.reject(error)\r\n  }\r\n})\r\n\r\nexport default fetch\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withRouter } from 'react-router'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport { loginUser } from '../../utils/api/login'\r\n\r\ninterface State {\r\n  account: string,\r\n  password: string\r\n}\r\n\r\nclass ToLogin extends React.Component{\r\n  constructor(props: any) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      password: ''\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    const { history }: any = this.props\r\n    const loginSuccess = localStorage.getItem('kmr_userInfo')\r\n    if (loginSuccess) {\r\n      history.push('/ticTacToe')\r\n    } \r\n  }\r\n\r\n  static propTypes = {\r\n    history: PropTypes.object.isRequired\r\n  }\r\n\r\n  synchronizationAccount = (e: any) => {\r\n    this.setState({ account: e.target.value })\r\n  }\r\n\r\n  synchronizationPsw = (e: any) => {\r\n    this.setState({ password: e.target.value })\r\n  }\r\n\r\n  login = () => {\r\n    const _this = this\r\n    if ((this.state as State).account && (this.state as State).password) {\r\n      loginUser({ ..._this.state }).then(res => {\r\n        if ((res as any).code === 200) {\r\n          localStorage.setItem('kmr_userInfo', JSON.stringify({account: res.data.account}));\r\n          (this.props as any).history.push('/games')\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form>\r\n        <Form.Field>\r\n          <label className='input-label'>账号</label>\r\n          <input placeholder='账号' value={(this.state as State).account} onChange={this.synchronizationAccount} />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label className='input-label'>密码</label>\r\n          <input placeholder='密码' value={(this.state as State).password} onChange={this.synchronizationPsw} />\r\n        </Form.Field>\r\n        <Button inverted color='violet' type='submit' onClick={this.login}>登录</Button>\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n\r\nconst Login = withRouter(ToLogin as any)\r\nexport default Login\r\n","import fetch from '../request/index'\r\n\r\nexport function loginUser(param: any) {\r\n  return fetch({\r\n    url: '/api/login',\r\n    method: 'post',\r\n    data: param\r\n  })\r\n}\r\n\r\nexport function test() {\r\n  return fetch({\r\n    url: '/home',\r\n    method: 'get'\r\n  })\r\n}\r\n"],"sourceRoot":""}