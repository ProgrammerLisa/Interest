{"version":3,"sources":["utils/request/config.ts","utils/request/index.ts","views/login/login.tsx","utils/api/login.ts"],"names":["config","baseURL","testBaseURL","IP","testIP","fetch","axios","create","timeout","interceptors","request","use","method","data","headers","qs","stringify","error","Promise","reject","response","a","async","code","layer","msg","status","console","log","ToLogin","props","synchronizationAccount","e","setState","account","target","value","synchronizationPsw","password","login","param","_this","url","window","location","href","split","state","then","res","localStorage","setItem","JSON","history","push","reload","this","getItem","Form","Field","className","placeholder","onChange","Button","inverted","color","type","onClick","React","Component","Login","withRouter"],"mappings":"wGAAA,kCAAO,IAAMA,EAAS,CACpBC,QAAS,8BACTC,YAAa,wBACbC,GAAI,uBACJC,OAAQ,mB,oGCDNC,EAAQC,IAAMC,OAAO,CACvBN,QAASD,IAAOC,QAChBO,QAAS,MAGXH,EAAMI,aAAaC,QAAQC,KAAI,SAAAX,GAM7B,MALsB,SAAlBA,EAAOY,QAAuC,QAAlBZ,EAAOY,QAAsC,WAAlBZ,EAAOY,QACpC,kBAAjBZ,EAAOa,MAAyD,wBAAnCb,EAAOc,QAAQ,kBACrDd,EAAOa,KAAOE,IAAGC,UAAUhB,EAAOa,OAG/Bb,KACN,SAAAiB,GACDC,QAAQC,OAAOF,MAGjBZ,EAAMI,aAAaW,SAAST,KAAI,SAAME,GAAN,SAAAQ,EAAAC,OAAA,uDACP,MAAnBT,EAAKA,KAAKU,MACZC,MAAMC,IAAIZ,EAAKA,KAAKY,KAFQ,kBAIvBZ,EAAKA,MAJkB,wCAK7B,SAAAI,GACD,OAAIA,EAAMG,UACsB,MAA1BH,EAAMG,SAASM,QACjBC,QAAQC,IAAI,wFAEPV,QAAQC,OAAOF,EAAMG,SAASP,OAE9BK,QAAQC,OAAOF,MAIXZ,O,2JCxBTwB,E,YACJ,WAAYC,GAAa,IAAD,8BACtB,4CAAMA,KAmBRC,uBAAyB,SAACC,GACxB,EAAKC,SAAS,CAAEC,QAASF,EAAEG,OAAOC,SArBZ,EAwBxBC,mBAAqB,SAACL,GACpB,EAAKC,SAAS,CAAEK,SAAUN,EAAEG,OAAOC,SAzBb,EA4BxBG,MAAQ,WACN,ICvCsBC,EDuChBC,EAAK,eACLC,EAAMC,OAAOC,SAASC,KAAKC,MAAM,MAAM,GAAGA,MAAM,KAAK,GACtD,EAAKC,MAAgBb,SAAY,EAAKa,MAAgBT,WCzCrCE,ED0CV,eAAKC,EAAMM,OCzClB1C,YAAM,CACXqC,IAAK,aACL9B,OAAQ,OACRC,KAAM2B,KDsC0BQ,MAAK,SAAAC,GACP,MAArBA,EAAY1B,OACf2B,aAAaC,QAAQ,eAAgBC,KAAKpC,UAAU,CAACkB,QAASe,EAAIpC,KAAKqB,WACtE,EAAKJ,MAAcuB,QAAQC,KAA3B,IAAD,OAAsCZ,IACtCC,OAAOC,SAASW,cAlCtB,EAAKR,MAAQ,CACXb,QAAS,GACTI,SAAU,IAJU,E,yFAQK,IACnBe,EAAiBG,KAAK1B,MAAtBuB,QACaH,aAAaO,QAAQ,iBAExCJ,EAAQC,KAAK,gB,+BA+Bf,OACE,kBAACI,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,2BAAOC,UAAU,eAAjB,8BACA,2BAAOC,YAAY,eAAKzB,MAAQoB,KAAKT,MAAgBb,QAAS4B,SAAUN,KAAKzB,0BAE/E,kBAAC2B,EAAA,EAAKC,MAAN,KACE,2BAAOC,UAAU,eAAjB,kCACA,2BAAOC,YAAY,eAAKzB,MAAQoB,KAAKT,MAAgBT,SAAUwB,SAAUN,KAAKnB,sBAEhF,kBAAC0B,EAAA,EAAD,CAAQC,UAAQ,EAACC,MAAM,SAASC,KAAK,SAASC,QAASX,KAAKjB,OAA5D,qB,GAtDc6B,IAAMC,WA4DtBC,EAAQC,YAAW1C,GACVyC","file":"static/js/4.2e331f5a.chunk.js","sourcesContent":["export const config = {\n  baseURL: 'http://111.229.226.139:9277',\n  testBaseURL: 'http://localhost:9277',\n  IP: '111.229.226.139:9277',\n  testIP: 'localhost:9277'\n}","import axios from 'axios'\nimport qs from 'qs'\nimport { config } from './config'\nlet fetch = axios.create({\n  baseURL: config.baseURL,\n  timeout: 30000\n})\n\nfetch.interceptors.request.use(config => {\n  if (config.method === 'post' || config.method === 'put' || config.method === 'delete') {\n    if (typeof(config.data) !== 'string' && config.headers['Content-Type'] !== 'multipart/form-data') {\n      config.data = qs.stringify(config.data)\n    }\n  }\n  return config\n}, error => {\n  Promise.reject(error)\n})\n\nfetch.interceptors.response.use(async data => {\n  if (data.data.code !== 200) {\n    layer.msg(data.data.msg)\n  }\n  return data.data\n}, error => {\n  if (error.response) {\n    if (error.response.status === 500) {\n      console.log('服务器错误，请联系管理员处理')\n    }\n    return Promise.reject(error.response.data)\n  } else {\n    return Promise.reject(error)\n  }\n})\n\nexport default fetch\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withRouter } from 'react-router'\nimport { Button, Form } from 'semantic-ui-react'\nimport { loginUser } from '../../utils/api/login'\n\ninterface State {\n  account: string,\n  password: string\n}\n\nclass ToLogin extends React.Component{\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      account: '',\n      password: ''\n    }\n  }\n\n  UNSAFE_componentWillMount() {\n    const { history }: any = this.props\n    const loginSuccess = localStorage.getItem('kmr_userInfo')\n    if (loginSuccess) {\n      history.push('/ticTacToe')\n    } \n  }\n\n  static propTypes = {\n    history: PropTypes.object.isRequired\n  }\n\n  synchronizationAccount = (e: any) => {\n    this.setState({ account: e.target.value })\n  }\n\n  synchronizationPsw = (e: any) => {\n    this.setState({ password: e.target.value })\n  }\n\n  login = () => {\n    const _this = this\n    const url = window.location.href.split('//')[1].split('/')[1]\n    if ((this.state as State).account && (this.state as State).password) {\n      loginUser({ ..._this.state }).then(res => {\n        if ((res as any).code === 200) {\n          localStorage.setItem('kmr_userInfo', JSON.stringify({account: res.data.account}));\n          (this.props as any).history.push(`/${ url }`)\n          window.location.reload()\n        }\n      })\n    }\n  }\n\n  render() {\n    return (\n      <Form>\n        <Form.Field>\n          <label className='input-label'>账号 (lisa / arya)</label>\n          <input placeholder='账号' value={(this.state as State).account} onChange={this.synchronizationAccount} />\n        </Form.Field>\n        <Form.Field>\n          <label className='input-label'>密码 (123456 / 654321)</label>\n          <input placeholder='密码' value={(this.state as State).password} onChange={this.synchronizationPsw} />\n        </Form.Field>\n        <Button inverted color='violet' type='submit' onClick={this.login}>登录</Button>\n      </Form>\n    )\n  }\n}\n\nconst Login = withRouter(ToLogin as any)\nexport default Login\n","import fetch from '../request/index'\n\nexport function loginUser(param: any) {\n  return fetch({\n    url: '/api/login',\n    method: 'post',\n    data: param\n  })\n}\n\nexport function test() {\n  return fetch({\n    url: '/home',\n    method: 'get'\n  })\n}\n"],"sourceRoot":""}