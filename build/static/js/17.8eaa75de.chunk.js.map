{"version":3,"sources":["assets/img/land_ocean.jpg","views/webgl/T1-Map3D.tsx"],"names":["module","exports","Canvas","elementNode","document","getElementById","renderer","THREE","setClearColor","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","appendChild","domElement","Sence","camera","position","z","controls","OrbitControls","addEventListener","render","minDistance","maxDistance","enablePan","mesh","url","load","texture","material","map","side","geometry","createMesh","EarthImg","add","update","target","copy","ambi","spotLight","set","intensity","stats","Stats","showPanel","dom","run","requestAnimationFrame","main","id","React","Component"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,wC,0JCMrCC,E,6LASN,WACE,IAAMC,EAAmBC,SAASC,eAAe,iBAC7CC,EAAW,IAAIC,IACnBD,EAASE,cAAc,SACvBF,EAASG,cAAcC,OAAOC,kBAC9BL,EAASM,QAAQF,OAAOG,WAAYH,OAAOI,aAC3CX,EAAYY,YAAYT,EAASU,YAGjC,IAAIC,EAAQ,IAAIV,IAGZW,EAAS,IAAIX,IAAwB,GAAIG,OAAOG,WAAaH,OAAOI,YAAa,EAAG,KACxFI,EAAOC,SAASC,EAAI,EAGpB,IAAIC,EAAgB,IAAIC,gBAAcJ,EAAQZ,EAASU,YACvDK,EAASE,iBAAiB,SAAUC,GACpCH,EAASI,YAAc,EACvBJ,EAASK,YAAc,GACvBL,EAASM,WAAY,EAGrB,IAAMC,EAgCR,SAAoBC,GAClB,IAAID,EAAO,IAAIrB,IAUf,OATe,IAAIA,QACZuB,KACLD,GACA,SAASE,GACPH,EAAKI,SAAW,IAAIzB,IAAwB,CAAE0B,IAAKF,IACnDH,EAAKI,SAASE,KAAO3B,IACrBqB,EAAKO,SAAW,IAAI5B,IAAqB,EAAG,GAAI,OAG7CqB,EA3CWQ,CAAWC,KAC7BpB,EAAMqB,IAAIV,GACVP,EAASkB,SACTlB,EAASmB,OAAOC,KAAKb,EAAKT,UAG1B,IAAMuB,EAAO,IAAInC,IAAmB,SACpCU,EAAMqB,IAAII,GACV,IAAIC,EAAY,IAAIpC,IAAuB,UAC3CoC,EAAUxB,SAASyB,IAAI,IAAK,IAAK,KACjCD,EAAUE,UAAY,GACtB5B,EAAMqB,IAAIK,GAGV,IAAIG,EAAQ,IAAIC,IAKhB,SAASvB,IACPlB,EAASkB,OAAOP,EAAOC,GACvB4B,EAAMP,SANRO,EAAME,UAAU,GAChB7C,EAAYY,YAAY+B,EAAMG,KAQ9B,SAASC,IACP1B,IACA2B,sBAAsBD,GAGxBA,GA3DEE,K,+BAGA,OAAQ,yBAAKC,GAAG,sB,GALCC,IAAMC,WA8EZrD","file":"static/js/17.8eaa75de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/land_ocean.b07dffb3.jpg\";","import React from 'react'\r\nimport * as THREE from 'three'\r\nimport { OrbitControls } from 'three-orbitcontrols-ts'\r\nimport Stats from 'stats.js'\r\nimport EarthImg from '../../assets/img/land_ocean.jpg'\r\n\r\nclass Canvas extends React.Component {\r\n  componentDidMount() {\r\n    main()\r\n  }\r\n  render() {\r\n    return (<div id=\"Sweet-Kingdom\"></div>)\r\n  }\r\n}\r\n\r\nfunction main(): any {\r\n  const elementNode: any = document.getElementById('Sweet-Kingdom')\r\n  let renderer = new THREE.WebGLRenderer()\r\n  renderer.setClearColor(0x333333)\r\n  renderer.setPixelRatio(window.devicePixelRatio)\r\n  renderer.setSize(window.innerWidth, window.innerHeight)\r\n  elementNode.appendChild(renderer.domElement)\r\n\r\n  // 场景\r\n  let Sence = new THREE.Scene()\r\n\r\n  // 透视相机\r\n  let camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000)\r\n  camera.position.z = 1\r\n\r\n  // 轨道控制器\r\n  let controls: any = new OrbitControls(camera, renderer.domElement)\r\n  controls.addEventListener('change', render)\r\n  controls.minDistance = 1\r\n  controls.maxDistance = 10\r\n  controls.enablePan = false\r\n\r\n  // 创建网格(mesh) 由模型(geometry)和材质(material)构成\r\n  const mesh: any = createMesh(EarthImg)\r\n  Sence.add(mesh)\r\n  controls.update()\r\n  controls.target.copy(mesh.position)\r\n\r\n  // 添加光源：环境光和点光源(平行光)\r\n  const ambi = new THREE.AmbientLight(0x404040) // 环境光\r\n  Sence.add(ambi)\r\n  let spotLight = new THREE.DirectionalLight(0xffffff) // 点光源\r\n  spotLight.position.set(550, 100, 550)\r\n  spotLight.intensity = 0.6\r\n  Sence.add(spotLight)\r\n\r\n  // 性能监控\r\n  let stats = new Stats()\r\n  stats.showPanel(1)\r\n  elementNode.appendChild(stats.dom)\r\n  \r\n  // 渲染\r\n  function render(): void {\r\n    renderer.render(Sence, camera)\r\n    stats.update()\r\n  }\r\n\r\n  function run(): void {\r\n    render()\r\n    requestAnimationFrame(run)\r\n  }\r\n\r\n  run()\r\n}\r\n\r\nfunction createMesh(url: string) {\r\n  let mesh = new THREE.Mesh()\r\n  const loader = new THREE.TextureLoader()\r\n  loader.load(\r\n    url,\r\n    function(texture) {\r\n      mesh.material = new THREE.MeshBasicMaterial({ map: texture })\r\n      mesh.material.side = THREE.DoubleSide\r\n      mesh.geometry = new THREE.SphereGeometry(1, 10, 10)\r\n    }\r\n  )\r\n  return mesh\r\n}\r\n\r\nexport default Canvas"],"sourceRoot":""}