{"version":3,"sources":["views/games/gobang.tsx"],"names":["Square","props","className","name","onClick","value","Checkerboard","i","type","key","this","square","columnSum","rowSum","num","columns","count","column","rows","row","push","renderSquare","renderRow","Component","Game","state","winner","Array","balckIsNext","forEach","rule","contentMap","map","sub","join","replace","RegExp","member","calculateWinner","console","log","v","setState","status","hanldClick"],"mappings":"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","file":"static/js/24.2534b15e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport '../../assets/sass/Gobang-style.css'\n\nfunction Square(props: any) {\n  return (\n    <button className={`square ${props.name}`} onClick={() => props.onClick()}>\n      {props.name === 'board-line' ? <span className={`piece ${props.value}`}></span> : ''}\n    </button>\n  )\n}\n\n\ninterface SquareType {\n  [index: number]: string\n}\n\ninterface CheckerboardProps {\n  square: SquareType,\n  onClick: (i: number) => void,\n  column: number,\n  row: number\n}\nclass Checkerboard extends Component<CheckerboardProps, {}> {\n  renderSquare(i: number, type: String) {\n    return (\n      <Square key={`square${i}`} name={type} value={this.props.square[i]} onClick={() => {this.props.onClick(i)}} />\n    )\n  }\n  renderRow(type: string, columnSum: number, rowSum: number) {\n    let num = rowSum + 1\n    if (type === 'board-line') num = rowSum\n    let columns = [], count = 0\n    for (let column = 0; column < columnSum + 1; column++) {\n      let rows = []\n      for (let row = 0; row < num; row++) {\n        rows.push(this.renderSquare(count, type))\n        count++\n      }\n      columns.push(<div className=\"board-row\" key={`row${column}`}>{rows}</div>)\n    }\n    return columns\n  }\n  render() {\n    return (\n      <div className=\"board-container\">\n        <div className=\"board-border\"></div>\n        <div className=\"board-foundation-container\">{this.renderRow('', this.props.column, this.props.row)}</div>\n        <div className=\"board-line-container\">{this.renderRow('board-line', this.props.column, this.props.row)}</div>\n      </div>\n    )\n  }\n}\n\ninterface GameState {\n  winner: any,\n  column: number,\n  row: number,\n  square: SquareType,\n  balckIsNext: boolean\n}\nclass Game extends Component<{}, GameState> {\n  constructor(props: any) {\n    super(props)\n    const row = 20\n    const column = 20\n    this.state = {\n      winner: null,\n      column: column,\n      row: row,\n      square: new Array(column * row),\n      balckIsNext: false\n    }\n  }\n  hanldClick (i: number): void {\n    let square = this.state.square\n    if (square[i]) return\n    square[i] = this.state.balckIsNext ? 'piece-black' : 'piece-white'\n    let winner: any = ''\n    if (this.state.winner) {\n      return\n    } else {\n      winner = calculateWinner(square, i, this.state.row)\n      if (winner) {\n        console.log(winner.member)\n        winner.member.forEach((v: number) => {\n          square[v] = 'piece-winner'\n        })\n      }\n    }\n    this.setState({\n      winner: winner,\n      square: square,\n      balckIsNext: !this.state.balckIsNext\n    })\n  }\n  render() {\n    const winner = this.state.winner\n    let status\n    if (winner) {\n      status = 'winner --- ' + winner.winner\n    } else {\n      status = 'Next Player --- ' + (this.state.balckIsNext ? '黑子' : '白子')\n    }\n    return (\n      <div>\n        <p>{status}</p>\n        <Checkerboard square={this.state.square} column={this.state.column} row={this.state.row} onClick={(i) => this.hanldClick(i)}></Checkerboard>\n      </div>\n    )\n  }\n}\n\nfunction calculateWinner(square: SquareType, i: number, row: number) {\n  var winnerList = [\n    // 横向连接\n    [i, i + 1, i + 2, i + 3, i + 4],\n    [i - 1, i, i + 1, i + 2, i + 3],\n    [i - 2, i - 1, i, i + 1, i + 2],\n    [i - 3, i - 2, i - 1, i, i + 1],\n    [i - 4, i - 3, i - 2, i - 1, i],\n    // 纵向连接\n    [i, i + row, i + row*2, i + row*3, i + row*4],\n    [i - row, i, i + row, i + row*2, i + row*3],\n    [i - row*2, i - row, i, i + row, i + row*2],\n    [i - row*3, i - row*2, i - row, i, i + row],\n    [i - row*4, i - row*3, i - row*2, i - row, i],\n    // 左上-右下 斜向连接\n    [i, i + row + 1, i + 2*(row + 1), i + (row + 1)*3, i + (row + 1)*4],\n    [i - (row + 1), i, i + row + 1, i + 2*(row + 1), i + (row + 1)*3],\n    [i - (row + 1)*2, i - (row + 1), i, i + row + 1, i + 2*(row + 1)],\n    [i - (row + 1)*3, i - (row + 1)*2, i - (row + 1), i, i + row + 1],\n    [i - (row + 1)*4, i - (row + 1)*3, i - (row + 1)*2, i - (row + 1), i],\n    // 右上-左下 斜向连接\n    [i, i + row - 1, i + 2*(row - 1), i + (row - 1)*3, i + (row - 1)*4],\n    [i - (row - 1), i, i + row - 1, i + 2*(row - 1), i + (row - 1)*3],\n    [i - (row - 1)*2, i - (row - 1), i, i + row - 1, i + 2*(row - 1)],\n    [i - (row - 1)*3, i - (row - 1)*2, i - (row - 1), i, i + row - 1],\n    [i - (row - 1)*4, i - (row - 1)*3, i - (row - 1)*2, i - (row - 1), i]\n  ]\n  let winner = null\n  winnerList.forEach(rule => {\n    let contentMap = rule.map(sub => {\n      return square[sub]\n    })\n    if ((contentMap.join(',') + ',').replace(new RegExp(contentMap[0] + ',', 'gi'), '') === '') {\n      winner =  { winner: square[i], member: rule }\n    }\n  })\n  return winner\n}\n\nexport default Game"],"sourceRoot":""}