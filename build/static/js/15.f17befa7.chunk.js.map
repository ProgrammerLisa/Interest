{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js","components/PageRouterList.tsx","views/sidebar/Games.tsx"],"names":["GridColumn","props","children","className","computer","color","floated","largeScreen","mobile","only","stretched","tablet","textAlign","verticalAlign","widescreen","width","classes","cx","useKeyOnly","useMultipleProp","useTextAlignProp","useValueAndKey","useVerticalAlignProp","useWidthProp","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","handledProps","propTypes","create","createShorthandFactory","GridRow","centered","columns","divided","reversed","Grid","celled","container","doubling","inverted","padded","relaxed","stackable","useKeyOrValueAndKey","Column","Row","GridItem","to","path","Menu","Item","Icon","name","icon","size","GridContainer","list","forEach","Element","index","push","key","RouterList","this","routes","Component","Games","gamesRoutes"],"mappings":"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","file":"static/js/15.f17befa7.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid column can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A column can specify a width for a computer. */\n  computer: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can sit flush against the left or right edge of a row. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A column can specify a width for a large screen device. */\n  largeScreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify a width for a mobile device. */\n  mobile: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A column can stretch its contents to take up the entire grid or row height. */\n  stretched: PropTypes.bool,\n\n  /** A column can specify a width for a tablet device. */\n  tablet: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A column can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A column can specify a width for a wide screen device. */\n  widescreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** Represents width of column. */\n  width: customPropTypes.every([customPropTypes.disallow(['computer', 'largeScreen', 'mobile', 'tablet', 'widescreen']), PropTypes.oneOf(SUI.WIDTHS)])\n} : {};\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid row can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: PropTypes.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: PropTypes.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default GridRow;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A grid can have rows divided into cells. */\n  celled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Represents column count per row in Grid. */\n  columns: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: PropTypes.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: PropTypes.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: PropTypes.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: PropTypes.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default Grid;","import React, { Component } from 'react'\r\nimport { Route, Link } from 'react-router-dom'\r\nimport { Grid, Menu, Icon } from 'semantic-ui-react'\r\ninterface GridItemProps {\r\n  path: string,\r\n  name: string,\r\n  component: any,\r\n  exact: boolean,\r\n  icon?: any\r\n}\r\nconst GridItem = (props: GridItemProps) => (\r\n  <Grid.Column>\r\n    <Link to={props.path} className='page-router-item'>\r\n      <Menu.Item>\r\n        <Icon name={props.icon} size='big' />\r\n        <p>{props.name}</p>\r\n      </Menu.Item>\r\n    </Link>\r\n  </Grid.Column>\r\n)\r\n\r\nconst GridRow = (props: GridItemProps[]) => {\r\n  let list: any = []\r\n  props.forEach((Element: any, index: number) => {\r\n    list.push(<GridItem {...Element} key={`GridItem${index}`} />)\r\n  })\r\n  return list\r\n}\r\n\r\nconst GridContainer = (props: GridItemProps[]) => (\r\n  <Grid className=\"auto-width text-center\" columns={3} divided>\r\n    <Grid.Row>\r\n      {GridRow(props)}\r\n    </Grid.Row>\r\n  </Grid>\r\n)\r\n\r\ninterface RouterListProps {\r\n  routes: GridItemProps[]\r\n}\r\nclass RouterList extends Component<RouterListProps, {}> {\r\n  render() {\r\n    return (\r\n      <Route>\r\n        {GridContainer(this.props.routes)}\r\n      </Route>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RouterList","import React, { Component } from 'react'\r\nimport { gamesRoutes } from '../../router/Routes'\r\nimport RouterList from '../../components/PageRouterList'\r\n\r\nclass Games extends Component {\r\n  render() {\r\n    return (<RouterList routes={gamesRoutes} />)\r\n  }\r\n}\r\n\r\nexport default Games"],"sourceRoot":""}