{"version":3,"sources":["components/Loading.tsx","components/Scroll.tsx","components/Error.tsx","router/SetRouter.tsx","router/Routes.tsx","views/sidebar/Siderbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loading","React","Component","history","createBrowserHistory","listen","location","action","currentY","document","documentElement","scrollTop","body","setTimeout","scrollAnimation","ScrollToTopOnMount","this","props","targetY","needScrollTop","_currentY","dist","Math","ceil","window","scrollTo","defaultProps","withRouter","ErrorBounday","state","hasError","children","setRouterList","routeList","map","Element","loader","AsyncLoadComponent","component","Loadable","loading","pastDelay","delay","Error","Scroll","Login","gamesRouter","path","name","exact","icon","webglRouter","gamesRoutes","webglRoutes","routes","Nav","toggleMenu","status","setState","isOpen","Sidebar","Pushable","as","Segment","Menu","animation","inverted","vertical","visible","width","Item","to","Icon","Pusher","fallback","className","route","key","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff66ae83.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default class Loading extends React.Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        Loading...\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { Component } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { createBrowserHistory } from 'history'\r\n/*\r\nclass ScrollToTop extends Component {\r\n  componentDidUpdate (prevProps) {\r\n    if (this.props.location !== prevProps.location) {\r\n      window.scrollTo(0, 0)\r\n    }\r\n  }\r\n  render () {\r\n    return this.props.children\r\n  }\r\n}\r\n*/\r\n\r\nvar history = createBrowserHistory()\r\nhistory.listen((location, action) => {\r\n  let currentY = document.documentElement.scrollTop || document.body.scrollTop\r\n  setTimeout(() => {\r\n    if (action === 'POP') { return }\r\n    scrollAnimation(currentY, 0)\r\n  })\r\n})\r\n\r\ninterface ScrollToTopOnMountProps {\r\n  history: any\r\n}\r\nclass ScrollToTopOnMount extends Component<ScrollToTopOnMountProps, {}> {\r\n  componentDidMount() {\r\n    let currentY = document.documentElement.scrollTop || document.body.scrollTop\r\n    if (this.props.history.action === 'POP') { return }\r\n    scrollAnimation(currentY, 0)\r\n  }\r\n  render() {\r\n    return null\r\n  }\r\n}\r\n\r\nfunction scrollAnimation(currentY: number, targetY: number): any {\r\n  let needScrollTop = targetY - currentY\r\n  let _currentY = currentY\r\n  setTimeout(() => {\r\n    const dist = Math.ceil(needScrollTop / 10)\r\n    _currentY += dist\r\n    window.scrollTo(_currentY, currentY)\r\n    if (needScrollTop > 10 || needScrollTop < -10) {\r\n      scrollAnimation(_currentY, targetY)\r\n    } else {\r\n      window.scrollTo(_currentY, targetY)\r\n    }\r\n  }, 1)\r\n}\r\n\r\n(ScrollToTopOnMount as any).defaultProps = {\r\n  history: history\r\n}\r\n\r\n// export default withRouter(ScrollToTop)\r\nexport default withRouter(ScrollToTopOnMount as any)\r\n","import React from 'react'\r\n\r\ninterface ErrorBoundayState {\r\n  hasError: boolean\r\n}\r\nclass ErrorBounday extends React.Component<{}, ErrorBoundayState> {\r\n  constructor (props: any) {\r\n    super(props)\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n  \r\n  static getDerivedStateFromError () {\r\n    return { hasError: true }\r\n  }\r\n\r\n  render () {\r\n    if (this.state.hasError) {\r\n      return <h1>Something Went Wrong.</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBounday\r\n","import React from 'react' // , { lazy }\r\nimport Loadable from 'react-loadable'\r\nimport Loading from '../components/Loading'\r\nimport ScrollToTop from '../components/Scroll' // 切换路由时滚动到顶部 返回或前进则滚动高度不变\r\nimport ErrorBounday from '../components/Error' // 错误边界\r\n\r\ninterface routeListItem {\r\n  path: string,\r\n  name: string,\r\n  component: any,\r\n  exact: boolean,\r\n  icon?: string\r\n}\r\n\r\n\r\ninterface routeListItem {\r\n  path: string,\r\n  name: string,\r\n  component: any,\r\n  exact: boolean,\r\n  icon?: string\r\n}\r\n\r\nfunction setRouterList(routeList: routeListItem[]) {\r\n  const routes = routeList.map(Element => {\r\n    const AsyncLoadComponent = asyncLoad(Element.component)\r\n    // 每次切换路由时 屏幕内容滚动到最上方\r\n    let ErrorComponent = () => (\r\n      <ErrorBounday>\r\n        <ScrollToTop/>\r\n        <AsyncLoadComponent/>\r\n      </ErrorBounday>\r\n    )\r\n    return { ...Element, component: ErrorComponent }\r\n  })\r\n  return routes\r\n}\r\n\r\nfunction asyncLoad(loader: () => Promise<any>) {\r\n  return Loadable({\r\n    loader,\r\n    loading: props => {\r\n      if (props.pastDelay) {\r\n        return <Loading />\r\n      } else {\r\n        return null\r\n      }\r\n    },\r\n    delay: 500\r\n  })\r\n}\r\n\r\nexport default setRouterList\r\n","import setRouterList from  './SetRouter'\r\n/* \r\n  懒加载组件 有两种方式 推荐使用第二种\r\n  1. lazy(() => import(组件地址)) 加载组件时会有闪屏 用户体验较差\r\n  2. Loadable({\r\n    loader: () => import(组件地址),\r\n    loading: 占位符组件\r\n  }) 加载时无闪屏 用户体验较好 但是有已废弃的生命周期警告\r\n  在相关文件中将componentWillMount改为UNSAFE_componentWillMount\r\n*/\r\n//\r\nconst Login = () => import('../views/login/Login')\r\nconst Games = () => import('../views/sidebar/Games')\r\nconst WebGL = () => import('../views/sidebar/Webgl')\r\nconst NotFound = () => import('../components/404')\r\nconst TicTacToe = () => import('../views/games/TicTacToe')\r\nconst Gobang = () => import('../views/games/Gobang')\r\nconst ChatRoom = () => import('../views/games/Room')\r\nconst Map3D = () => import('../views/webgl/T1-Map3D')\r\nconst CreateObjects = () => import('../views/webgl/T2-CreateObjects')\r\nconst UseTexture = () => import('../views/webgl/T3-UseTexture')\r\n/*\r\n  lazy()方法示例\r\n  const GobangLazy = lazy(Gobang)\r\n  const ContextLazy = lazy(Context)\r\n  const FormLazy = lazy(Form)\r\n*/\r\n\r\nconst sidebarRouter =\r\n[\r\n  {\r\n    path: '/',\r\n    name: 'home',\r\n    component: Login,\r\n    exact: true\r\n  },\r\n  {\r\n    path: '/login',\r\n    name: 'login',\r\n    component: Login,\r\n    exact: false\r\n  },\r\n  {\r\n    path: '/games',\r\n    name: 'games',\r\n    component: Games,\r\n    exact: false\r\n  },\r\n  {\r\n    path: '/webgl',\r\n    name: 'webgl',\r\n    component: WebGL,\r\n    exact: false\r\n  },\r\n  {\r\n    path: '/404',\r\n    name: '404',\r\n    component: NotFound,\r\n    exact: false\r\n  }\r\n]\r\n\r\nconst gamesRouter =\r\n[\r\n  {\r\n    path: '/gobang',\r\n    name: '五子棋',\r\n    component: Gobang,\r\n    exact: false,\r\n    icon: 'chess board'\r\n  },\r\n  {\r\n    path: '/ticTacToe',\r\n    name: '井字棋',\r\n    component: TicTacToe,\r\n    exact: false,\r\n    icon: 'th'\r\n  },\r\n  {\r\n    path: '/chatRoom',\r\n    name: '联机五子棋',\r\n    component: ChatRoom,\r\n    exact: false,\r\n    icon: 'handshake outline'\r\n  }\r\n]\r\n\r\nconst webglRouter =\r\n[\r\n  {\r\n    path: '/map3D',\r\n    name: '3D地图',\r\n    component: Map3D,\r\n    exact: false,\r\n    icon: 'paper plane outline'\r\n  },\r\n  {\r\n    path: '/create-objects',\r\n    name: '创建物体',\r\n    component: CreateObjects,\r\n    exact: false,\r\n    icon: 'hourglass half'\r\n  },\r\n  {\r\n    path: '/use-texture',\r\n    name: '使用纹理',\r\n    component: UseTexture,\r\n    exact: false,\r\n    icon: 'barcode'\r\n  }\r\n]\r\nconst routeList = [...sidebarRouter, ...gamesRouter, ...webglRouter]\r\nexport const gamesRoutes = setRouterList(gamesRouter)\r\nexport const webglRoutes = setRouterList(webglRouter)\r\nexport const routes = setRouterList(routeList)\r\n","import React, { Suspense, Component } from 'react'\r\nimport { Route, Switch, Link } from 'react-router-dom'\r\nimport { routes } from '../../router/Routes'\r\nimport { Icon, Menu, Segment, Sidebar } from 'semantic-ui-react'\r\n\r\ninterface NavState {\r\n  isOpen: boolean\r\n}\r\n\r\nclass Nav extends Component<{}, NavState> {\r\n  toggleMenu = (status: boolean) => {\r\n    this.setState({\r\n      isOpen: !status\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <Route>\r\n        <Sidebar.Pushable as={Segment}>\r\n          <Sidebar\r\n            as={Menu}\r\n            animation='overlay'\r\n            icon='labeled'\r\n            inverted\r\n            vertical\r\n            visible\r\n            width='thin'\r\n          >\r\n            <Menu.Item>\r\n              <Link to='/games'>\r\n                <Icon name='chess' />\r\n                <p>游戏室</p>\r\n              </Link>\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n              <Link to='/webgl'>\r\n                <Icon name='globe' />\r\n                <p>3D世界</p>\r\n              </Link>\r\n            </Menu.Item>\r\n          </Sidebar>\r\n          <Sidebar.Pusher>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <header className=\"App-header\">\r\n                <Switch>\r\n                  {routes.map(route => (<Route {...route} key={route.name}/>))}\r\n                </Switch>\r\n              </header>\r\n            </Suspense>\r\n          </Sidebar.Pusher>\r\n        </Sidebar.Pushable>\r\n      </Route>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react'\nimport Sidebar from './views/sidebar/Siderbar'\nimport 'semantic-ui-css/semantic.min.css'\nimport './assets/sass/App.scss'\nimport './assets/sass/style.scss'\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Sidebar />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport './assets/sass/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}