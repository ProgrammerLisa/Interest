{"version":3,"sources":["common/initCanvas.ts","common/random.ts","views/webgl/T2-CreateObjects.tsx"],"names":["Threescene","options","_scene","_camera","_renderer","_ambientLight","_directionalLight","_controls","_stats","_options","_animateSign","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","render","setSize","animate","requestAnimationFrame","update","initObject","props","add","mesh","cancelAnimationFrame","removeObject","remove","destroy","this","THREE","cameraOption","rendererOption","ambientLight","directionalLight","OrbitControls","domElement","Stats","init","position","cameraPosition","set","lookAt","setClearColor","rendererColor","setPixelRatio","devicePixelRatio","node","appendChild","initLight","initControls","initStats","onresize","intensity","lightIntensity","defaultOptions","controls","minDistance","maxDistance","enablePan","enableDamping","dampingFactor","autoRotate","showPanel","dom","randomColor","arrHex","strHex","index","i","Math","round","random","eval","remarks","text","animation","Preface","duration","visible","className","CreateGrid","inverted","color","onClick","addGeometry","material","wireframe","wireframeLinewidth","geometry","castShadow","canvas","Mesh","TWEEN","Tween","to","z","floor","repeat","start","TransitionRemarks","state","buttonType","initCanvas","readRemarks","arr","callback","time","length","setState","setTimeout","ElementNode","document","getElementById","antialias","InitCanvas","createButton","id","Component"],"mappings":"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","file":"static/js/11.9c46da7c.chunk.js","sourcesContent":["import * as THREE from 'three'\r\nimport { OrbitControls } from 'three-orbitcontrols-ts'\r\nimport Stats from 'stats.js'\r\n\r\n/**\r\n * @method canvasType canvas参数\r\n * @param node 生成结点\r\n * @param cameraOption 相机参数[视野, 显示口的宽高比, 近裁剪面, 远裁剪面]\r\n * @param cameraPosition 相机视点[x, y, z]\r\n * @param renderColor 渲染器颜色\r\n * @param ambientLight 环境光\r\n * @param directionalLight 点光源\r\n * @param lightPosition 光源视点\r\n * @param lightIntensity 曝光度\r\n * @param controls 控制器\r\n */\r\ninterface canvasType {\r\n  node: any\r\n  cameraOption?: number[]\r\n  cameraPosition?: number[]\r\n  rendererOption?: object\r\n  rendererColor?: any\r\n  ambientLight?: any\r\n  directionalLight?: any\r\n  lightPosition?: number[]\r\n  lightIntensity?: number,\r\n  controls?: any\r\n}\r\ninterface GeometryType {\r\n  mesh: THREE.Mesh\r\n  animate?: any\r\n  update?: any\r\n}\r\n\r\nexport default class Threescene {\r\n  private _scene: THREE.Scene\r\n  private _camera: THREE.PerspectiveCamera\r\n  private _renderer: THREE.WebGLRenderer\r\n  private _ambientLight: THREE.AmbientLight\r\n  private _directionalLight: THREE.DirectionalLight\r\n  private _controls: OrbitControls\r\n  private _stats: Stats\r\n  private _options: canvasType\r\n  private _animateSign: number\r\n  public constructor(options: canvasType) {\r\n    this._options = options\r\n    this._scene = new THREE.Scene()\r\n    this._camera = new THREE.PerspectiveCamera(...this._options.cameraOption || [45, window.innerWidth / window.innerHeight, 0.1, 2000])\r\n    this._renderer = new THREE.WebGLRenderer(this._options.rendererOption || {})\r\n    this._ambientLight = new THREE.AmbientLight(this._options.ambientLight || 0x404040)\r\n    this._directionalLight = new THREE.DirectionalLight(this._options.directionalLight || 0xFF0000)\r\n    this._controls = new OrbitControls(this._camera, this._renderer.domElement)\r\n    this._stats = new Stats()\r\n    this._animateSign = 0\r\n    this.init()\r\n  }\r\n  /**\r\n   * @method init 初始化场景\r\n   */\r\n  public init() {\r\n    let position\r\n    this._options.cameraPosition ? position = this._options.cameraPosition : position = [-40, 40, 40]\r\n    this._camera.position.set(position[0], position[1], position[2])\r\n    this._camera.lookAt(this._scene.position)\r\n    this._renderer.setClearColor(this._options.rendererColor || 0x282c34)\r\n    this._renderer.setSize(window.innerWidth, window.innerHeight)\r\n    this._renderer.setPixelRatio(window.devicePixelRatio)\r\n    this._options.node.appendChild(this._renderer.domElement)\r\n    // this._scene.add(new THREE.AxesHelper(10))\r\n    this.initLight()\r\n    this.initControls()\r\n    this.initStats()\r\n    this.animate()\r\n    window.onresize = this.onWindowResize\r\n  }\r\n  /**\r\n   * @method initLight 初始化灯光\r\n   */\r\n  private initLight() {\r\n    this._scene.add(this._ambientLight)\r\n    this._directionalLight.position.set(0, 0, 1)\r\n    this._directionalLight.intensity = this._options.lightIntensity || 0.6\r\n    this._scene.add(this._directionalLight)\r\n  }\r\n  /**\r\n   * @method initControls 初始化轨道控制器\r\n   * @param enableDamping 启用阻尼效果\r\n   * @param dampingFactor 阻尼系数\r\n   * @param autoRotate 启用自动旋转\r\n   */\r\n  private initControls() {\r\n    const defaultOptions = this._options.controls || {}\r\n    this._controls.minDistance = defaultOptions.minDistance || 1\r\n    this._controls.maxDistance = defaultOptions.maxDistance || 10\r\n    this._controls.enablePan = defaultOptions.enablePan || true\r\n    this._controls.enableDamping = defaultOptions.enableDamping || true\r\n    this._controls.dampingFactor = defaultOptions.dampingFactor || 0.25\r\n    this._controls.autoRotate = defaultOptions.autoRotate || false\r\n  }\r\n  /**\r\n   * @method initControls 初始化性能监控\r\n   */\r\n  private initStats() {\r\n    this._stats.showPanel(1)\r\n    this._options.node.appendChild(this._stats.dom)\r\n  }\r\n  /**\r\n   * @method onWindowResize 窗口变动触发的函数\r\n   */\r\n  private onWindowResize = () => {\r\n    this._camera.aspect = window.innerWidth / window.innerHeight\r\n    this._camera.updateProjectionMatrix()\r\n    this.render()\r\n    this._renderer.setSize(window.innerWidth, window.innerHeight)\r\n  }\r\n  /**\r\n   * @method render 渲染函数\r\n   */\r\n  private render() {\r\n    this._renderer.render(this._scene, this._camera)\r\n  }\r\n  /**\r\n   * @method animate 动画\r\n   */\r\n  private animate = () => {\r\n    this.render()\r\n    this._animateSign = requestAnimationFrame(this.animate)\r\n    this._stats.update()\r\n    this._controls.update()\r\n  }\r\n  initObject = (props: GeometryType) => {\r\n    this._scene.add(props.mesh)\r\n    if (props.animate || props.update) {\r\n      if (props.animate) props.animate(props.mesh)\r\n      cancelAnimationFrame(this._animateSign)\r\n      this.animate = () => {\r\n        this.render()\r\n        this._animateSign = requestAnimationFrame(this.animate)\r\n        this._stats.update()\r\n        this._controls.update()\r\n        if (props.update) props.update(props.mesh)\r\n      }\r\n      this.animate()\r\n    }\r\n  }\r\n  removeObject = (mesh: THREE.Mesh) => {\r\n    this._scene.remove(mesh)\r\n  }\r\n  destroy = () => {\r\n    cancelAnimationFrame(this._animateSign)\r\n  }\r\n}\r\n","export const randomColor = (): any => {\r\n  let arrHex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'],\r\n    strHex = '0x',\r\n    index\r\n  for (let i = 0; i < 6; i++) {\r\n    index = Math.round(Math.random() * 15)\r\n    strHex += arrHex[index]\r\n  }\r\n  // eslint-disable-next-line no-eval\r\n  return eval(strHex)\r\n}","import React, { Component } from 'react'\r\nimport { Transition, Button } from 'semantic-ui-react'\r\nimport * as THREE from 'three'\r\nimport TWEEN from '@tweenjs/tween.js'\r\nimport { randomColor } from '../../common/random'\r\nimport InitCanvas from '../../common/initCanvas'\r\n\r\ninterface remarksType {\r\n  text: string,\r\n  animation: string\r\n}\r\ninterface TransitionRemarksState {\r\n  visible: boolean,\r\n  duration: number,\r\n  text: string,\r\n  animation: string,\r\n  index: number,\r\n  buttonType: string | undefined,\r\n  initCanvas: any\r\n}\r\nconst remarks: remarksType[] = [\r\n  { text: '此项目为简单的创建物体', animation: 'jiggle'  },\r\n  { text: '随机位置创建随机大小的球体', animation: 'fade up' },\r\n  { text: '试试吧', animation: 'fade up' }\r\n]\r\n\r\nconst Preface = (props: TransitionRemarksState) => {\r\n  return(\r\n    <Transition\r\n      animation={props.animation}\r\n      duration={props.duration}\r\n      visible={props.visible}\r\n    >\r\n      <p className='text-center'>{props.text}</p>\r\n    </Transition>\r\n  )\r\n}\r\n\r\nconst CreateGrid = (props: any) => {\r\n  return (<Button inverted color='violet' className='float-button' onClick={() => addGeometry(props)}>创造一个球体</Button>)\r\n}\r\n\r\nconst addGeometry = (props: any) => {\r\n  const color = randomColor()\r\n  const material = new THREE.MeshBasicMaterial({\r\n    color: color,\r\n    wireframe: false,\r\n    wireframeLinewidth: 1\r\n  })\r\n  const geometry = new THREE.SphereGeometry(Math.random() * 0.5, Math.random() * 0.5, Math.random() * 0.5)\r\n  const mesh = new THREE.Mesh(geometry, material)\r\n  mesh.position.set(Math.random() * 10 - 5, Math.random() * 10 - 5, Math.random() * 5)\r\n  mesh.castShadow = true\r\n  props.canvas.initObject({\r\n    mesh: mesh,\r\n    animate: (Mesh: THREE.Mesh) => {\r\n      new TWEEN.Tween(Mesh.position).to({ z: Math.floor((Math.random() > 0.5 ? -10 : 10) * Math.random()) }, 300).repeat(0).start()\r\n    },\r\n    update: () => {\r\n      TWEEN.update()\r\n    }\r\n  })\r\n}\r\n\r\nclass TransitionRemarks extends Component<{}, TransitionRemarksState> {\r\n  state = { visible: false, duration: 800, text: '', animation: '', index: 0, buttonType: '', initCanvas: null }\r\n  componentDidMount() {\r\n    const ElementNode: any = document.getElementById('Sweet-Kingdom')\r\n    this.readRemarks(0, remarks, () => {\r\n      this.setState({ visible: false })\r\n      const options = {\r\n        node: ElementNode,\r\n        rendererOption: { antialias: true }, // 启用抗锯齿\r\n        controls: {\r\n          autoRotate: true\r\n        }\r\n      }\r\n      setTimeout(() => {\r\n        const initCanvas = new InitCanvas(options)\r\n        this.setState({\r\n          buttonType: 'grid',\r\n          initCanvas: initCanvas\r\n        })\r\n      }, this.state.duration)\r\n    })\r\n  }\r\n  \r\n  readRemarks = (index = 0, arr: remarksType[], callback: any): any => {  \r\n    const time = this.state.duration\r\n    if (index >= remarks.length) {\r\n      callback()\r\n    } else {\r\n      if (this.state.visible) {\r\n        this.setState({\r\n          visible: false,\r\n          duration: time / 2\r\n        })\r\n        setTimeout(() => {\r\n          return this.readRemarks(index, arr, callback)\r\n        }, time / 1.5)\r\n      } else {\r\n        this.setState({\r\n          visible: true,\r\n          text: remarks[index].text,\r\n          animation: remarks[index].animation,\r\n          index: index,\r\n          duration: time * 2\r\n        })\r\n        setTimeout(() => {\r\n          return this.readRemarks(index + 1, arr, callback)\r\n        }, time * 4)\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { buttonType } = this.state\r\n    let createButton\r\n    switch (buttonType) {\r\n      case 'grid':\r\n        createButton = (<CreateGrid canvas={this.state.initCanvas} />)\r\n        break\r\n      default:\r\n        createButton = ''\r\n    }\r\n    return (\r\n      <>\r\n        <Preface {...this.state} />\r\n        <div id='Sweet-Kingdom'></div>\r\n        {createButton}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TransitionRemarks"],"sourceRoot":""}