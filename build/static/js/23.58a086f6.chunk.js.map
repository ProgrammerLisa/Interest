{"version":3,"sources":["components/pageRouterList.tsx","../node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js","views/sidebar/games.tsx"],"names":["GridItem","props","Column","to","path","className","Item","name","icon","size","GridContainer","columns","divided","Row","list","forEach","Element","index","push","key","GridRow","RouterList","this","routes","Component","GridColumn","children","computer","color","floated","largeScreen","mobile","only","stretched","tablet","textAlign","verticalAlign","widescreen","width","classes","cx","useKeyOnly","useMultipleProp","useTextAlignProp","useValueAndKey","useVerticalAlignProp","useWidthProp","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","handledProps","propTypes","create","createShorthandFactory","centered","reversed","Grid","celled","container","doubling","inverted","padded","relaxed","stackable","useKeyOrValueAndKey","Games","gamesRoutes"],"mappings":"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","file":"static/js/23.58a086f6.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Route, Link } from 'react-router-dom'\nimport { Grid, Menu, Icon } from 'semantic-ui-react'\ninterface GridItemProps {\n  path: string,\n  name: string,\n  component: any,\n  exact: boolean,\n  icon?: any\n}\nconst GridItem = (props: GridItemProps) => (\n  <Grid.Column>\n    <Link to={props.path} className='page-router-item'>\n      <Menu.Item>\n        <Icon name={props.icon} size='big' />\n        <p>{props.name}</p>\n      </Menu.Item>\n    </Link>\n  </Grid.Column>\n)\n\nconst GridRow = (props: GridItemProps[]) => {\n  let list: any = []\n  props.forEach((Element: any, index: number) => {\n    list.push(<GridItem {...Element} key={`GridItem${index}`} />)\n  })\n  return list\n}\n\nconst GridContainer = (props: GridItemProps[]) => (\n  <Grid className=\"auto-width text-center\" columns={3} divided>\n    <Grid.Row>\n      {GridRow(props)}\n    </Grid.Row>\n  </Grid>\n)\n\ninterface RouterListProps {\n  routes: GridItemProps[]\n}\nclass RouterList extends Component<RouterListProps, {}> {\n  render() {\n    return (\n      <Route>\n        {GridContainer(this.props.routes)}\n      </Route>\n    )\n  }\n}\n\nexport default RouterList","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid column can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A column can specify a width for a computer. */\n  computer: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can sit flush against the left or right edge of a row. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A column can specify a width for a large screen device. */\n  largeScreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify a width for a mobile device. */\n  mobile: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A column can stretch its contents to take up the entire grid or row height. */\n  stretched: PropTypes.bool,\n\n  /** A column can specify a width for a tablet device. */\n  tablet: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A column can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A column can specify a width for a wide screen device. */\n  widescreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** Represents width of column. */\n  width: customPropTypes.every([customPropTypes.disallow(['computer', 'largeScreen', 'mobile', 'tablet', 'widescreen']), PropTypes.oneOf(SUI.WIDTHS)])\n} : {};\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid row can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: PropTypes.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: PropTypes.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default GridRow;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A grid can have rows divided into cells. */\n  celled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Represents column count per row in Grid. */\n  columns: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: PropTypes.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: PropTypes.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: PropTypes.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: PropTypes.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default Grid;","import React, { Component } from 'react'\nimport { gamesRoutes } from '../../router/routes'\nimport RouterList from '../../components/pageRouterList'\n\nclass Games extends Component {\n  render() {\n    return (<RouterList routes={gamesRoutes} />)\n  }\n}\n\nexport default Games\n"],"sourceRoot":""}